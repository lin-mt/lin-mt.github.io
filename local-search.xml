<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>解决Dubbo调用时丢失当前用户</title>
    <link href="/2022/05/06/%E8%A7%A3%E5%86%B3Dubbo%E8%B0%83%E7%94%A8%E6%97%B6%E4%B8%A2%E5%A4%B1%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7/"/>
    <url>/2022/05/06/%E8%A7%A3%E5%86%B3Dubbo%E8%B0%83%E7%94%A8%E6%97%B6%E4%B8%A2%E5%A4%B1%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Dubbo 消费方在调用提供方的服务时，提供方需要获取当前用户，此时，消费方可以通过 Dubbo 的自定义 <a href="https://dubbo.apache.org/zh/docsv2.7/dev/impls/filter/">filter</a> 将当前用户的信息传递给服务提供方。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="在服务提供方创建-Dubbo-Filter-文件"><a href="#在服务提供方创建-Dubbo-Filter-文件" class="headerlink" title="在服务提供方创建 Dubbo Filter 文件"></a>在服务提供方创建 Dubbo Filter 文件</h2><p>在文件夹 <code>resources/META-INF/dubbo</code> 下创建名称为 <code>org.apache.dubbo.rpc.Filter</code> 的文件:</p><p><img src="https://lin-mt.coding.net/p/opensource/d/blog-img/git/raw/main/posts/20220508143322.png" alt="服务提供方Filter"></p><p>文件内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">user-info-provider=com<span class="hljs-selector-class">.gitee</span><span class="hljs-selector-class">.quiet</span><span class="hljs-selector-class">.service</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.provider</span>.UserInfoFilter<br></code></pre></td></tr></table></figure><h2 id="配置服务提供方"><a href="#配置服务提供方" class="headerlink" title="配置服务提供方"></a>配置服务提供方</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dubbo:</span><br>  <span class="hljs-attr">provider:</span><br>    <span class="hljs-attr">filter:</span> <span class="hljs-string">user-info-provider</span><br></code></pre></td></tr></table></figure><h2 id="在服务消费方创建-Dubbo-Filter-文件"><a href="#在服务消费方创建-Dubbo-Filter-文件" class="headerlink" title="在服务消费方创建 Dubbo Filter 文件"></a>在服务消费方创建 Dubbo Filter 文件</h2><p>在文件夹 <code>resources/META-INF/dubbo</code> 下创建名称为 <code>org.apache.dubbo.rpc.Filter</code> 的文件:</p><p><img src="https://lin-mt.coding.net/p/opensource/d/blog-img/git/raw/main/posts/20220508143322.png" alt="服务消费方Filter"></p><p>文件内容：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">user-info-consumer=com<span class="hljs-selector-class">.gitee</span><span class="hljs-selector-class">.quiet</span><span class="hljs-selector-class">.service</span><span class="hljs-selector-class">.dubbo</span><span class="hljs-selector-class">.filter</span><span class="hljs-selector-class">.consumer</span>.UserInfoFilter<br></code></pre></td></tr></table></figure><h2 id="配置服务提供方-1"><a href="#配置服务提供方-1" class="headerlink" title="配置服务提供方"></a>配置服务提供方</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">dubbo:</span><br>  <span class="hljs-attr">consumer:</span><br>    <span class="hljs-attr">filter:</span> <span class="hljs-string">user-info-consumer</span><br></code></pre></td></tr></table></figure><h1 id="初始方案"><a href="#初始方案" class="headerlink" title="初始方案"></a>初始方案</h1><h2 id="获取当前用户"><a href="#获取当前用户" class="headerlink" title="获取当前用户"></a>获取当前用户</h2><p>因为安全框架使用的是 <code>Spring Security</code>，可以通过 <code>SecurityContextHolder.getContext().getAuthentication()</code> 获取当前用户信息。</p><h2 id="定义服务消费方-Filter"><a href="#定义服务消费方-Filter" class="headerlink" title="定义服务消费方 Filter"></a>定义服务消费方 <code>Filter</code></h2><p>在服务消费方需要将当前用户信息通过 Dubbo Filter 传递给服务提供方：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> &lt;a href=&quot;mailto:lin-mt@outlook.com&quot;&gt;lin-mt&lt;/a&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Activate(group = CommonConstants.CONSUMER)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfoFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">invoke</span><span class="hljs-params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="hljs-keyword">throws</span> RpcException &#123;<br>        <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext().getAuthentication();<br>        <span class="hljs-keyword">if</span> (authentication != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 可以将 authentication 转为 Json 串</span><br>            invocation.setAttachment(<span class="hljs-string">&quot;user-info&quot;</span>, authentication);<br>        &#125;<br>        <span class="hljs-keyword">return</span> invoker.invoke(invocation);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="定义服务提供方-Filter"><a href="#定义服务提供方-Filter" class="headerlink" title="定义服务提供方 Filter"></a>定义服务提供方 <code>Filter</code></h2><p>服务提供方从 Dubbo Filter 中获取当前用户信息，并设置到 Spring Security 上下文中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> &lt;a href=&quot;mailto:lin-mt@outlook.com&quot;&gt;lin-mt&lt;/a&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Activate(group = CommonConstants.PROVIDER)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfoFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">invoke</span><span class="hljs-params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="hljs-keyword">throws</span> RpcException &#123;<br>        <span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> (Authentication) invocation.getObjectAttachment(<span class="hljs-string">&quot;user-info&quot;</span>);<br>        <span class="hljs-keyword">if</span> (authentication != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">SecurityContextImpl</span> <span class="hljs-variable">securityContext</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityContextImpl</span>();<br>            securityContext.setAuthentication(authentication);<br>            SecurityContextHolder.setContext(securityContext);<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> invoker.invoke(invocation);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (authentication != <span class="hljs-literal">null</span>) &#123;<br>                SecurityContextHolder.clearContext();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方案存在的问题"><a href="#方案存在的问题" class="headerlink" title="方案存在的问题"></a>方案存在的问题</h2><p>使用该方案实现的时候会出现序列化异常，可以解决，感兴趣的可以试试，在此就不提供解决序列化问题的方法了，因为该方案传当前用户信息并不是最优的。当用户的信息很多的时候，会导致传递的数据量无法控制，而且有时候服务提供方可能根本就不需要获取当前的用户信息，但是每次调用提供方的时候都会传递用户的所有信息，所以会导致消耗过多的网络带宽。</p><h1 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h1><p>传递 Token 代替传递用户所有信息，使用装饰器模式实现按需获取当前用户信息。</p><h2 id="服务消费方-Filter"><a href="#服务消费方-Filter" class="headerlink" title="服务消费方 Filter"></a>服务消费方 <code>Filter</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> &lt;a href=&quot;mailto:lin-mt@outlook.com&quot;&gt;lin-mt&lt;/a&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Activate(group = CommonConstants.CONSUMER)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfoFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">invoke</span><span class="hljs-params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="hljs-keyword">throws</span> RpcException &#123;<br>        <span class="hljs-type">RequestAttributes</span> <span class="hljs-variable">requestAttributes</span> <span class="hljs-operator">=</span> RequestContextHolder.getRequestAttributes();<br>        <span class="hljs-keyword">if</span> (requestAttributes != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">tokenValue</span> <span class="hljs-operator">=</span> (String) ((ServletRequestAttributes) requestAttributes).getRequest()<br>                .getAttribute(OAuth2AuthenticationDetails.ACCESS_TOKEN_VALUE);<br>            invocation.setAttachment(OAuth2AuthenticationDetails.ACCESS_TOKEN_VALUE, tokenValue);<br>        &#125;<br>        <span class="hljs-keyword">return</span> invoker.invoke(invocation);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="服务提供方-Filter"><a href="#服务提供方-Filter" class="headerlink" title="服务提供方 Filter"></a>服务提供方 <code>Filter</code></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> &lt;a href=&quot;mailto:lin-mt@outlook.com&quot;&gt;lin-mt&lt;/a&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Activate(group = CommonConstants.PROVIDER)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfoFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">invoke</span><span class="hljs-params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="hljs-keyword">throws</span> RpcException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">tokenValue</span> <span class="hljs-operator">=</span> invocation.getAttachment(OAuth2AuthenticationDetails.ACCESS_TOKEN_VALUE);<br>        <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(tokenValue)) &#123;<br>            SecurityContextHolder.setContext(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QuietSecurityContext</span>(tokenValue));<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> invoker.invoke(invocation);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (StringUtils.isNotBlank(tokenValue)) &#123;<br>                SecurityContextHolder.clearContext();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="QuietSecurityContext"><a href="#QuietSecurityContext" class="headerlink" title="QuietSecurityContext"></a>QuietSecurityContext</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> &lt;a href=&quot;mailto:lin-mt@outlook.com&quot;&gt;lin-mt&lt;/a&gt;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuietSecurityContext</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SecurityContext</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String tokenValue;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SecurityContext</span> <span class="hljs-variable">securityContext</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">QuietSecurityContext</span><span class="hljs-params">(<span class="hljs-meta">@NotBlank</span> String tokenValue)</span> &#123;<br>        <span class="hljs-built_in">this</span>.tokenValue = tokenValue;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Authentication <span class="hljs-title function_">getAuthentication</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (securityContext.getAuthentication() != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> securityContext.getAuthentication();<br>        &#125;<br>        <span class="hljs-type">TokenStore</span> <span class="hljs-variable">tokenStore</span> <span class="hljs-operator">=</span> SpringUtil.getBean(TokenStore.class);<br>        <span class="hljs-type">OAuth2Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> tokenStore.readAuthentication(tokenValue);<br>        <span class="hljs-built_in">this</span>.setAuthentication(authentication);<br>        <span class="hljs-keyword">return</span> securityContext.getAuthentication();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAuthentication</span><span class="hljs-params">(Authentication authentication)</span> &#123;<br>        securityContext.setAuthentication(authentication);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="优化的方案存在的问题"><a href="#优化的方案存在的问题" class="headerlink" title="优化的方案存在的问题"></a>优化的方案存在的问题</h2><p>因为服务消费方也可能是服务提供方，所以 <code>RequestContextHolder.getRequestAttributes()</code> 有可能就获取不到 Token 信息。所以当出现 <code>A</code> 服务调用 <code>B</code> 服务，<code>B</code> 服务调用 <code>C</code> 服务，就会导致丢失当前用户信息，<code>C</code> 服务就获取不到当前用户信息，这个可以通过 <code>ThreadLocal</code> 解决，在此就不提供解决代码了。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>阅读下 <code>Spring Security</code> 获取当前用户的源代码就能知道是怎么回事了哈～</p>]]></content>
    
    
    <categories>
      
      <category>项目实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dubbo</tag>
      
      <tag>Spring Security</tag>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
